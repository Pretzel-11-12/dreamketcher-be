name: Deploy To EC2

on:
  push:
    branches:
      - test/redis

jobs:
  deploy:
    environment: dev
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 테스트 및 빌드하기
        run: ./gradlew build -Pjasypt.encryptor.password=${{secrets.JASYPT_ENCRYPTOR_PASSWORD}}

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t dreamketcher-dev-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag dreamketcher-dev-server ${{ steps.login-ecr.outputs.registry }}/dreamketcher-dev-server:latest

      - name: ECR에 Docker 이미지 Push하기
        run: docker push ${{ steps.login-ecr.outputs.registry }}/dreamketcher-dev-server:latest

      - name: 이전 ECR 이미지 정리
        run: |
          REPO_NAME="dreamketcher-dev-server"

          OLD_IMAGES=$(aws ecr list-images \
            --repository-name $REPO_NAME \
            --query 'imageIds[?imageTag!=`latest`]' \
            --output json)
          
          DIGESTS=$(echo "$OLD_IMAGES" | jq -r '.[] | select(.imageTag == null) | .imageDigest')
          TAGS=$(echo "$OLD_IMAGES" | jq -r '.[] | select(.imageTag != null) | .imageTag')
          
          if [ -n "$DIGESTS" ]; then
            for DIGEST in $DIGESTS; do
              echo "Deleting untagged image with digest: $DIGEST"
              aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageDigest=$DIGEST
            done
          else
            echo "No untagged images to delete"
          fi
          
          if [ -n "$TAGS" ]; then
            for TAG in $TAGS; do
              echo "Deleting image with tag: $TAG"
              aws ecr batch-delete-image --repository-name $REPO_NAME --image-ids imageTag=$TAG
            done
          else
            echo "No tagged images (other than latest) to delete"
          fi

      - name: docker-compose.yml 파일을 EC2로 전송하기
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "./docker-compose.yml"
          target: "/home/ubuntu/docker-compose.yml"

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true

          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            JASYPT_ENCRYPTOR_PASSWORD: ${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}
            REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          script: |
            sudo apt-get update -y
            sudo apt-get install -y unzip
            
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
            if ! command -v docker-compose &> /dev/null
            then
            echo "docker-compose could not be found, installing..."
            sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin $ECR_REGISTRY

            docker stop dreamketcher-dev-server || true
            docker rm dreamketcher-dev-server || true
            
            docker system prune -af || true
            
            echo "ECR_URL=$ECR_REGISTRY" > /home/ubuntu/.env
            echo "JASYPT_ENCRYPTOR_PASSWORD=$JASYPT_ENCRYPTOR_PASSWORD" >> /home/ubuntu/.env
            echo "REDIS_PASSWORD=$REDIS_PASSWORD" >> /home/ubuntu/.env
            
            cd /home/ubuntu
            docker-compose --env-file .env up -d --build --pull
            
            docker ps